using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestProject1
{
    class Program
    {
        //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        //Каждый новый член последовательности Фибоначчи генерируется сложением двух предыдущих условий. Начав с 1 и 2, первые 10 элементов будут:
        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        //Рассматривая члены в последовательности Фибоначчи, значения которых не превышают четыре миллиона, найти сумму четных членов.

        static void Main(string[] args)
        {
            //Fibonacchi();
            Task102 task = new Task102();
            Console.WriteLine(task.Check() ? "Проверка пройдена" : "Проверка не пройдена!!!");
            Console.WriteLine(task.T(2));
            Enumerable.Range(2, 8).ToList().ForEach(i =>
            {
                DateTime start = DateTime.Now;
                Console.WriteLine("T({0}) = {1}", i, task.T(i));
                TimeSpan spend = (DateTime.Now - start);
                Console.WriteLine("Прошло времени: " + spend);
            });
        }       
    }

    public class Task102
    {
        public bool Check()
        {
            return RemoveNulls(100300) == 13 && T(2) == 9 && T(5) == 3492;
        }

        public int RemoveNulls(int n)
        {
            return int.Parse(n.ToString().Replace("0",""));
        }

        public int T(int n)
        {
            int maxNumber = (int )Math.Pow(10,n);
            int numberOf10Friendly = 0;
            foreach(int i in Enumerable.Range(1,maxNumber))
            {
                //numberOf10Friendly += (IsFriendly(i) ? 1 : 0);
                numberOf10Friendly += (IsFriendly(RemoveNulls(i)) ? 1 : 0);
            }
            return numberOf10Friendly;
        }

        bool IsFriendly(int i)
        {
            List<int> digits = i.ToString().Select(c => int.Parse(c.ToString())).ToList();
            List<bool> marked = digits.Select(_ => false).ToList();
            for (int startindex = 0; startindex < digits.Count; ++startindex)
            {
                for (int length = 1; startindex + length <= digits.Count; ++length)
                {
                    int sum = digits.Skip(startindex).Take(length).Sum();
                    if (sum > 10)
                    {
                        break;
                    }
                    if (sum == 10)
                    { 
                        foreach(int markIndex in Enumerable.Range(startindex, length))
                        {
                            marked[markIndex] = true;
                        }
                    }
                }
                if (!marked[startindex]) return false;
            }
            return true;
        }
    }
}
